敏捷开发宣言
个体和交互胜过过程和工具
可工作的软件胜过面面俱到的文档
客户协作胜过合同谈判
相应变化胜过遵循计划
------------------------------------------------------------------
态度决定一切
指责不能修复bug。
应该把矛头对准问题的解决办法而不是人，这是真正有用处的正面效应。出了问题先解决问题才是正确做法，第一时间指责别人只会造成更大的损失。
不要坠入快速的简单修复之中。
要投入时间和精力保持代码的整洁和敞亮，少量的快速修复可能没有很大的负面影响，但是大量的快速修复就有可能导致项目失败。
做正确的事情，要诚实。
有勇气去说出实情。有时候这样做会很困难，但是要克服这种困难，鼓起勇气。
------------------------------------------------------------------
学无止境
软件技术发展迅速，必须时时刻刻学习才能跟上脚步。
下面是一些学习建议：
迭代和增量式的学习，每天计划用一段时间来学习新技术，不需要很长时间，但需要经常学习。记下你想学习的东西，如今天工作上听到的不熟悉的短语或术语等。
了解最新行情，互联网上有大量的学习资料，优秀博客，去读一读。
参加本地的用户组活动，听听讲座或课程。
参加研讨会议，计算机大会经常会在世界各地举行研讨会，这些聚会是向专家学习的最好机会。
如饥似渴的阅读，经常研读一些相关书籍杂志，甚至报纸等，多读书绝对没有坏处。

跟踪技术变化，你不需要精通所有的技术，但是需要清楚知道行业的动向，从而规划你的项目和职业生涯。

提供你和团队学习的更好的平台 通过如午餐会议这样的团队活动可以增进每个人的知识和技能，并帮助大家聚集在一起进行沟通交流，唤起大家对技术和技巧的激情，
会对项目大有益处。

学习新东西的同时，丢弃旧的东西，丢掉阻碍你的旧习惯，不能因为习惯和依赖就一味遵循。
不停地问为什么， 只满足于别人告诉你的表面现象，要不停地提问直到你明白问题的根源。
把握开发的节奏，解决任务，在一切变得一团糟之前。保持事件之间稳定重复的间隔（迭代周期的时长相同），这样更容易解决常见的重复任务。
项目需要右一致和稳定的节奏。编辑代码，运行测试，代码复审等，一致的迭代然后发布。
------------------------------------------------------------------
交付用户想要的软件
让你的客户做决定。开发者、经理或者业务分析师不应该做业务方面的决定。用业务负责人能够理解的语言，向他们详细解释遇到的问题并让他们做决定。
好的设计是一张地图。它也会进化，设计指引你向正确的方向前进，不应该标识具体路线，你不能被设计或设计师所操纵。好的设计应该是正确的，而不是准确的,
它是一目标而不是一个具体的处方。
根据具体需要选择技术，首先要确定需要的是什么，接着为这些具体的问题评估使用技术，对任何要使用的技术，多问一些挑剔的问题，并真实的作出回答。
保持你的项目随时可以发布。保证你的系统随时可以进行编译、运行、测试并立即部署。
提早集成，频繁集成。代码集成是主要的风险来源，要想规避这个风险只有提前集成，持续而有规划的进行集成。
一开始就实现自动化部署应用。使用部署系统安装你的应用，在不同的机器上用不同的配置文件测试依赖的问题。质量保证人员要像测试应用一样测试部署。
清晰可见的开发。在开发的要保持应可见（而且客户心中也要了解）。每隔一周或者两周，邀请所有客户，给他们演示最新完成的功能，获得他们的积极反馈。
使用短迭代，增量开发。发布带有最小却可用功能块的产品，每个增量开发中是，使用1~4周左右的迭代周期。
基于真实工作的评估。让团队和客户一起，真正得知当前项目中工作，做具体实际的评估。由客户控制他们想要的功能和预算。
------------------------------------------------------------------
敏捷反馈
单元测试
单元测试能及时提供反馈
单元测试让你的代码更加健壮
单元测试是有用的设计工具
单元测试是让你自信的后台
单元测试是解决问题时的探测器
单元测试是可信的文档
单元测试是学习工具
使用自动化的单元测试。好的单元测试能够为你的代码问题提供及时的警报。如果没有到位的单元测试，不要进行任何设计和代码修改。使用单元测试要确保单元测试可以
自动的重复使用。
先用它再实现它。（引申为先编写测试代码，再编写程序）。将TDD作为设计工具，会为你带来更简单更有实效的设计。
不同环境就有不同问题。不同系统硬件环境下运行同一段代码可能出现不同的问题。使用持续集成工具，在每一种支持的平台和环境中运行单元测试。要积极的寻找问题
而不是等着问题来找你。
自动验收测试。为核心的业务逻辑创建测试。让你的客户单独验证这些测试，要让他们像一般的测试一样可以自动运行。
度量真实的进度。判断工作进度最好是看实际花费的时间而不是估计的时间。度量剩下的工作量，不要用不恰当的度量来欺骗自己或者团队。要评估哪些需要完成的待办
事项。
倾听用户的声音。每一个客户的抱怨都有可能隐藏着软件的不足之处，找出真想，修复它才是应该做的事情，而不是去嘲笑用户愚蠢。
------------------------------------------------------------------
敏捷编码
要编写清晰的而不是讨巧的代码，要向代码阅读者明确表达这段代码的意图，可读性差的代码并不可取，好的代码是让阅读者对其用处一目了然。
使用代码沟通，选取简单直观的命名方式并使用简单明了的注释，用注释描述代码意图和约束，注释不能代替优秀的代码。
动态评估权衡。考虑性能、便利性、生产力、成本和上市时间。如果性能表现足够了，就将注意力放在其他因素上，不要为了感觉上的性能提升或者设计的优雅而将设计
个复杂化。不要过度强调某一个单一的因素，特别是这个因素不是软件必须因素的时候，过度强调必将导致错误。
很短的编辑/构建/测试-循环中编写代码。这要比花费长时间仅仅做编写代码的工作好得多。可以创建更加清晰、简单、易于维护的代码。
书籍缺失115~130页的内容。
------------------------------------------------------------------
敏捷调试
警告就是错误，不要忽略“warning”这类的字眼，既然出警告就必然是有问题的。签入带有警告的代码就跟签入有错误或者没有通过测试的代码一样，都是极差的做法。
签入
构建工具中的代码不应该产生任何警告信息，说不定在后期这些警告就会变成严重的错误，所以要从一开始就规避这样的风险。
对问题逐个击破。将需要关注的代码或者问题分离出来，这样才能更快更好地解决问题，特别是在大型系统中，更是应该注重模块化，这样出现问题时就能特别关注问题。
及时报告所有异常，处理或是向上传播所有的异常。不要将它们研制不管，九段是临时这昂做也不行，写代码的时候要估计到会发生的问题。
展示有用的错误信息，在用户端出现错误时，要合理的展示出错误信息，要尽可能的让用户在反馈是能够给维护人员提供出足够的信息，也要保证用户不能深陷在错误信
息里。
------------------------------------------------------------------
敏捷协作
定期安排会面时间，会议讨论三个问题，昨天有什么收获？今天计划要做哪些工作？面临着哪些障碍？使用立会，立会可以让团队达成共识，保证会议时间短小但内容精
悍不跑题。
好的架构师必须实际参与编程。优秀的设计从积极的程序员那里开始演化，积极的编程可以带来深入的理解，不要使用不愿意编程的架构师—不知道系统的真实情况，是
无法展开设计的。
实行代码集体所有制，让开发人员轮换完成系统不同领域中的不同模块的不同任务。
成为一个指导者，分享自己的经验知识等，分享是一个十分有趣的过程，你在付出的同时也会有一些收获，不要固守着你自己拥有的知识，要激励别人和别人分享，这样
能提升自己也能提升整个团队的实力。
给别人一些机会，允许大家一起想办法解决遇到的问题，指给他们正确的方向，而不是直接提供解决方案，，每个人都能从中学到不少东西。
准备好之后再共享代码。不要提交尚未完成的代码，故意签入编译未通过或是没有通过单元测试的代码对于项目来说就是玩忽职守的犯罪行为。
做好代码复查工作，复查所有代码，度与提升代码质量和降低错误率来说，代码复查是无价之宝，正确的方式进行，复查可以产生非常实用有效的成果，要让不同的开发
人员在每个任务完成后复查代码。
及时通报进展与问题。发布进展情况，新的想法和目前正在关注的主题，不要等着别人来询问项目的状态。
------------------------------------------------------------------
个人总结：
敏捷开发不仅仅是针对于软件项目而言的，大部分的理论都为一般的团队项目提供了一个比较好的项目展开方法，它对于团队的要求很基本又很有效。主要关注点就是减
少团队合作的误区和误会，沟通非常重要，项目进展一定要及时跟进和汇报，如果出现错误务必及时解决，并且要采取行之有效的方法而不是投机取巧，定期分享知识以
提高团队水平而不是一枝独秀，一枝独秀的后果就是你觉得团队拖累了你，而且最终的项目结果有很大的可能性不能让你自己满意。

