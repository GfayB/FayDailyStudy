操作符---------------------------
+、-、*、/、=的用法与其他编程语言类似
几乎所有的操作符都只能操作“基本类型”，但例外的是=、==、!=  它们可以操作所有的对象
除此之外，String类支持+和+=

需要注意多个运算符之间的优先级问题，与正常数学中的优先级一致。

赋值“=”
意思是取等号右边的值（称为右值rvalue），赋给等号左边的值（称为左值lvalue）
右值可以是任何常数、变量或者表达式 左值必须是一个明确的已命名的变量，但是不能把任何东西赋给一个常数，即常数不能为左值。

接下来我们看一个示例：例如对基本类型使用a=b，那么就把b的值赋值给了a，若现在又将a进行了修改，b根本不会受到影响，一般而言这是我们期望的。
但是在为对象“赋值”的时候，却不是这样的。对对象进行操作时我们实际操作的是对对象的引用，这意味着“讲一个对象赋值给另一个对象”实际上是将引用从一方复制到
另一方，如c=d，那么c和d就会指向原本只有d指向的对象，下面我们运行一个程序来阐明：
class Number{
   int i;
}

public class Assignment{
   public static void main(String args[]){
      Number n1=new Number();
      Number n2=new Number();
      n1.i=9;
      n2.i=47;
      System.out.println("直接输出n1.i:"+n1.i+"   "+"n2.i:"+n2.i);
      n1=n2;
      System.out.println("执行n1=n2后n1.i:"+n1.i+"   "+"n2.i:"+n2.i);
      n1.i=27;
      System.out.println("对n1重新赋值后n1.i:"+n1.i+"   "+"n2.i:"+n2.i);
      System.out.println("以上结果显示了第三步对n1对象重新赋值后，n2也会改变，因

为n1=n2时n1、n2已经指向同一个对象了");
   }

}

注意整数除法会直接去掉结果的小数位，而不是得出四舍五入的结果。
取模操作% 从整数除法中产生余数。

java中也使用简化符号：+=、-=、*=、、=意为进行相应的运算后并将结果赋给原来的对象。
eg:x+=4就意味着x=x+4










验证前缀递增（减）和后缀递增（减）的作用
public class MathOps
{
   public static void main(String Args[])
   {
      int i=1;

System.out.println("i=:"+i);
System.out.println("++i=:"+ ++i);
System.out.println("i++=:"+ i++);

System.out.println("i=:"+i);
System.out.println("--i=:"+ --i);
System.out.println("i--=:"+ i--);
System.out.println("i=:"+i);
   }
}

预期输出结果应该是
i=:1
++i=:2
i++=:2
i=:3
--i=:2
i--=:2
i=:1



