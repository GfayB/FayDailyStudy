java中三个关键字定义了内部设定边界，public，private，protected，这三个关键字决定了被定义的东西可以被谁使用
public表示紧随其后的元素可以被所有人访问
private表示出了类型创建者和类型的内部方法以外，其他任何人都不能访问
protected与private类似，但protected定义的元素可以被子类访问。
--------------------------------------------------------
继承后亦可以在子类中添加新的方法。
需要覆盖从父类继承的方法时，只需要在子类中对这种方法重新定义即可。
--------------------------------------------------------
引用（reference）
尽管一切都可以看作是对象，但操纵的标示符实际上是对象的一个“引用”。举个例子，对象时电视机，引用就应该是遥控器，实际上操作的是遥控器这个引用，但行动的
是电视机这个对象；即使没有电视机，遥控器也可以存在，也就是说引用可以独立与对象存在。
--------------------------------------------------------
基本类型     大小        最大值        最小值         包装器类型
boolean     ----         ---          ---            Boolean
char        16bit      Unicode o     Unicode2^16-1   Character
byte        8bit       -128          +127             Byte
short       16bit      -2^15         +2^15-1         Short
int         32bit      -2^31         +2^31-1         Integer
long        64bit      -2^63         +2^63-1         Long
float       32bit      IEEE754       IEEE754         Float
double      64bit      IEEE754       IEEE754         Double
void        ----       ----             ----         Void
所有数值类型都有正负号，所以不要去寻找无符号的数值类型。
Java提供两个高精度的计算类，BigInteger和BigDecimal。二者没有对应的基本类型，但这两个类包含的方法提供的操作与对基本类型所能执行的操作类似。即对int和
float执行的操作，同样也作用与这两个类，但 必须以方法调用的方式取代运算符来实现。
BigInteger支持任意精度的整数。
BigDecimal支持任意精度的定点数。
------------------------------------------------------
java的目标之一就是安全性，它确保数组会被初始化，而且不能在它的范围之外被访问。当创建一个数组对象时，实际上就是创建了一个引用数组，并且每个引用都会自动
被初始化一个特定值，该值拥有自己的关键字null，一旦java看到null就会知道这个引用还没有被指向某个对象。使用还是null的引用就会运行出错。关于数组，后续还会
详细讨论。
------------------------------------------------------
作用域
在C、C++和java中，作用域由花括号的位置决定。
举个例子
{
   int x=12；
   //当前只有x可用
   {
      int q=96；
      //当前x和q都可以使用
   }
   //只有x可用，q已经不在作用域内了
}
在作用域内定义的变量只能在作用域结束之前使用。
需要注意：
{
   int x=12；
   {
      int x=96；
   }
}
这样的写法是错误的。
对象的作用域---------------------------------
当你使用new关键字创建一个java对象时，它就可以存活于作用域之外。
{
   String s=new String ("a string");
}//作用域结束，引用s在作用域终点就消失了，但s指向的String对象仍继续占据内存。
事实证明，由new关键字创建的对象，只要你需要就会一直保留下去
如果这样的话，有个问题就是如何保持内存空间部内占满？java有一个机制“垃圾回收器”，监视new创建的所有对象并辨别不再被引用的对象然后释放这些对象占用的空间
--------------------------------------------
创建新的数据类型：类
Class关键字----创建一新类型
class ATypeName{/*类主体*/}//创建了一个新的类
而后就可以在这个类下使用new关键字创建新的对象了
字段和方法
class DataOnly{
   int i;
   float f;
   boolean;
}
尽管这个类还什么都不能做，但你可以给它创建一个新的对象
DataOnly d= new DataOnly();
给字段赋值需要知道如何具体引用一个对象的成员：引用对象的名称.对象内部成员名eg:d.i
d.i=47;
d.f=1.1f;//数字后的f表示浮点数
d.b=false;
若类的某个成员是基本数据类型，即使没有进行初始化，java也会确保它获取一个默认值，如下表所示
基本类型                     默认值
boolean                     false
char                       '\uooo'(null)
byte                       (byte)o
short                      (short)o
int                         0
long                        0L
float                       0.0f
double                      0.0d
注意：只有变量作为类成员时， java才确保赋予默认值。但这些默认值有可能不符合你的需求，所以还是要明确地对变量进项初始化。
方法、参数和返回值
java常用“方法”来表示子程序（C++或C称为“函数”）。
方法的基本组成包括：名称、参数、返回值和方法体。例如
returnType methodName(/*argument list参数列表*/){
   /*method Body*/
}
返回类型是指调用方法后返回的数据类型。
参数列表给出了要传给方法的信息的类型和名称。方法名和参数列表共同唯一地标识出某个方法。
在java中方法只能作为类的一部分来创建。方法只有通过对象才能被调用，而且这个对象必须能执行这个方法调用。
调用结构如下：
objectName.methodName(arg1,arg2,...);
参数列表
方法的参数列表指定要传递给方法的信息
return关键字的作用有二：其一是代表已经执行完方法内代码，离开此方法。其二，如果方法产生了一个值，这个值要放在return语句后面。若返回类型为void那么
return关键字的作用就是退出方法，如果不是void，那么无论在何处返回编译器都会强制返回一个正确类型的返回值。
使用预先定义好的类：使用import关键字导入标准类库的构件，如：import java.util.ArrayList;
util中包含了很多类，如果需要使用其中几个又不想一一指明，就可以使用“*”通配符：import java.util.*;
static关键字
当声明一个事物是static时，就意味着这个数据或方法不会与包含它的类的任何对象实例联系在一起，所以即使从未创建某个类的任何对象，也可以调用其static方法
或访问其static数据。
eg：生成一个static字段并对其初始化
class StaticTest{
       static int i=47
}
然后即使创建了两个StaticTest对象Static.i也只有一份存储空间，这两个对象共享一个i
StaticTest st1=new StaticTest();
StaticTest st2=new StaticTest();
这里st1和st2指向的是同一个存储空间所以它们的值都是47。
定义静态方法的做法和定义静态字段的做法类似
class StaticFunc{
   static void incr(){
      StaticTest.i++;
   }
}
通过对象来代用incr()
StaticFunc sf=new StaticFunc();
sf.incr();
或者因为incr()是一个静态方法，可以直接通过类调用：StaticFunc.incr();
static作用于某个字段时，static字段对每个类来说就只有一份存储空间
但static方法的一个重要作用就是可以在不常见任何一个对象的前提下调用它。
-----------------------------------------------------
第一个java程序（//后的单行和/**/中间包裹的段落均为程序注释）
//HelloData.java
import java.util.*;//导入外部类

public calss HelloDate{//java的类名第一个字母必须大写
   public static void main(String[] args){
      System.out.prinln("Hello,it's:");
      System.out.println(new Date());
   }
}
