2017.4.7
java中三个关键字定义了内部设定边界，public，private，protected，这三个关键字决定了被定义的东西可以被谁使用
public表示紧随其后的元素可以被所有人访问
private表示出了类型创建者和类型的内部方法以外，其他任何人都不能访问
protected与private类似，但protected定义的元素可以被子类访问。
--------------------------------------------------------
继承后亦可以在子类中添加新的方法。
需要覆盖从父类继承的方法时，只需要在子类中对这种方法重新定义即可。
--------------------------------------------------------
引用（reference）
尽管一切都可以看作是对象，但操纵的标示符实际上是对象的一个“引用”。举个例子，对象时电视机，引用就应该是遥控器，实际上操作的是遥控器这个引用，但行动的
是电视机这个对象；即使没有电视机，遥控器也可以存在，也就是说引用可以独立与对象存在。
--------------------------------------------------------
基本类型     大小        最大值        最小值         包装器类型
boolean     ----         ---          ---            Boolean
char        16bit      Unicode o     Unicode2^16-1   Character
byte        8bit       -128          +127             Byte
short       16bit      -2^15         +2^15-1         Short
int         32bit      -2^31         +2^31-1         Integer
long        64bit      -2^63         +2^63-1         Long
float       32bit      IEEE754       IEEE754         Float
double      64bit      IEEE754       IEEE754         Double
void        ----       ----             ----         Void
所有数值类型都有正负号，所以不要去寻找无符号的数值类型。
Java提供两个高精度的计算类，BigInteger和BigDecimal。二者没有对应的基本类型，但这两个类包含的方法提供的操作与对基本类型所能执行的操作类似。即对int和
float执行的操作，同样也作用与这两个类，但 必须以方法调用的方式取代运算符来实现。
BigInteger支持任意精度的整数。
BigDecimal支持任意精度的定点数。
------------------------------------------------------
java的目标之一就是安全性，它确保数组会被初始化，而且不能在它的范围之外被访问。当创建一个数组对象时，实际上就是创建了一个引用数组，并且每个引用都会自动
被初始化一个特定值，该值拥有自己的关键字null，一旦java看到null就会知道这个引用还没有被指向某个对象。使用还是null的引用就会运行出错。关于数组，后续还会
详细讨论。
------------------------------------------------------
作用域
在C、C++和java中，作用域由花括号的位置决定。
举个例子
{
   int x=12；
   //当前只有x可用
   {
      int q=96；
      //当前x和q都可以使用
   }
   //只有x可用，q已经不在作用域内了
}
在作用域内定义的变量只能在作用域结束之前使用。
需要注意：
{
   int x=12；
   {
      int x=96；
   }
}
这样的写法是错误的。
对象的作用域---------------------------------
当你使用new关键字创建一个java对象时，它就可以存活于作用域之外。
{
   String s=new String ("a string");
}//作用域结束，引用s在作用域终点就消失了，但s指向的String对象仍继续占据内存。














































